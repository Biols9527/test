#!/usr/bin/env python

"""
Execute graphing commands for TE density visualization with detailed reporting
Version: 2.0.0
Original Author: Scott Teresi
Modified by: Claude and wq-ls
Last Modified: 2025-03-08
"""

import argparse
import os
import logging
import coloredlogs
import numpy as np
from collections import defaultdict
from datetime import datetime
import matplotlib.pyplot as plt
import getpass

from transposon.gene_data import GeneData
from transposon.density_data import DensityData
from transposon.import_filtered_genes import import_filtered_genes


def get_metadata():
    """获取当前时间和用户信息"""
    current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    current_user = getpass.getuser()
    return current_time, current_user


def generate_density_report(data_dict, window_list=None, region="", output_file=None):
    """
    生成TE密度数据的详细报告
    
    Args:
        data_dict (dict): 包含TE类型和密度值的字典
        window_list (list, optional): 窗口位置列表(用于上游/下游区域)
        region (str): 区域标识("Upstream"/"Intragenic"/"Downstream")
        output_file (str, optional): 输出文件路径
        
    Returns:
        str: 格式化的报告文本
    """
    current_time, current_user = get_metadata()
    report = []
    
    report.append("="*80)
    report.append(f"TE Density Report - {region} Region")
    report.append(f"Report generated at: {current_time} UTC")
    report.append(f"Generated by: {current_user}")
    report.append("="*80)
    
    if window_list is not None:  # 上游/下游区域
        report.append("\nDensity values at each window position:")
        report.append("-"*50)
        for te_type, densities in data_dict.items():
            report.append(f"\nTE Type: {te_type}")
            report.append("Window Position | Density Value")
            report.append("-"*30)
            for pos, density in zip(window_list, densities):
                report.append(f"{pos:>14} | {density:.6f}")
            
            # 添加统计信息
            avg_density = np.mean(densities)
            max_density = np.max(densities)
            min_density = np.min(densities)
            std_density = np.std(densities)
            
            report.append("\nSummary Statistics:")
            report.append(f"Average Density: {avg_density:.6f}")
            report.append(f"Maximum Density: {max_density:.6f}")
            report.append(f"Minimum Density: {min_density:.6f}")
            report.append(f"Standard Deviation: {std_density:.6f}")
            report.append("-"*50)
    
    else:  # 基因内区域
        report.append("\nIntragenic Density Values:")
        report.append("-"*50)
        report.append("TE Type | Density Value")
        report.append("-"*30)
        for te_type, density in data_dict.items():
            if isinstance(density, list):
                density = density[0]
            report.append(f"{te_type:<20} | {density:.6f}")
    
    report_text = "\n".join(report)
    
    if output_file:
        with open(output_file, 'w') as f:
            f.write(report_text)
    
    return report_text


def plot_intra_density(dd_obj, order_or_super, output_dir, te_types=None, format='svg', 
                      display=False, ylim=None):
    """
    绘制基因内TE密度图并生成报告
    
    Args:
        dd_obj (DensityData): 密度数据对象
        order_or_super (str): TE分类类型 ('Order' 或 'Superfamily')
        output_dir (str): 输出目录路径
        te_types (list, optional): 要绘制的特定TE类型列表
        format (str): 输出图像格式
        display (bool): 是否显示图像
        ylim (tuple): Y轴范围(最小值, 最大值)
    """
    plotting_dict = {}

    if order_or_super == "Order":
        te_index_dict = dd_obj.order_index_dict
        h5_frame = dd_obj.intra_orders
    elif order_or_super == "Superfamily":
        te_index_dict = dd_obj.super_index_dict
        h5_frame = dd_obj.intra_supers
    else:
        raise ValueError("Please provide Order or Superfamily")

    if te_types:
        filtered_dict = {k: v for k, v in te_index_dict.items() if k in te_types}
        if not filtered_dict:
            raise ValueError(f"None of the specified TE types found in {order_or_super}")
        te_index_dict = filtered_dict

    # 计算并存储密度值
    for te_type, index_val in te_index_dict.items():
        density_val = np.mean(h5_frame[te_index_dict[te_type], :, :])
        plotting_dict[te_type] = density_val
        print(f"TE type: {te_type}, Density value: {density_val:.6f}")

    # 生成报告
    report_file = os.path.join(output_dir, 
                              f"{order_or_super}_{dd_obj.genome_id}_Intra_Density_Report.txt")
    generate_density_report(plotting_dict, region="Intragenic", output_file=report_file)

    # 绘图
    plt.figure(figsize=(10, 6))
    for key, val in plotting_dict.items():
        plt.scatter(0, val, label=key)
        plt.legend()

    if ylim:
        plt.ylim(ylim)
    else:
        plt.yticks(np.arange(0, 0.8, 0.05))
        
    plt.xticks([0])
    plt.xlabel("Window Position in BP")
    plt.ylabel("Intragenic TE Density")
    plt.title(f"TE {order_or_super}s")

    plt.savefig(
        os.path.join(
            output_dir, f"{order_or_super}_{dd_obj.genome_id}_Intra_Plot.{format}"
        )
    )
    if display:
        plt.show()
    plt.close()


def plot_density_all(dd_obj, order_or_super, output_dir, logger, te_types=None, 
                    format='svg', display=False, ylim=None):
    """
    绘制所有区域(上游、基因内、下游)的TE密度图并生成详细报告
    
    Args:
        dd_obj (DensityData): 密度数据对象
        order_or_super (str): TE分类类型 ('Order' 或 'Superfamily')
        output_dir (str): 输出目录路径
        logger (logging.Logger): 日志对象
        te_types (list, optional): 要绘制的特定TE类型列表
        format (str): 输出图像格式
        display (bool): 是否显示图像
        ylim (tuple): Y轴范围(最小值, 最大值)
    """
    if order_or_super == "Order":
        te_index_dict = dd_obj.order_index_dict
        left_h5_frame = dd_obj.left_orders
        intra_h5_frame = dd_obj.intra_orders
        right_h5_frame = dd_obj.right_orders
    elif order_or_super == "Superfamily":
        te_index_dict = dd_obj.super_index_dict
        left_h5_frame = dd_obj.left_supers
        intra_h5_frame = dd_obj.intra_supers
        right_h5_frame = dd_obj.right_supers
    else:
        raise ValueError("Please provide Order or Superfamily")

    if te_types:
        filtered_dict = {k: v for k, v in te_index_dict.items() if k in te_types}
        if not filtered_dict:
            raise ValueError(f"None of the specified TE types found in {order_or_super}")
        logger.info(f"Filtering to include only these TE types: {', '.join(filtered_dict.keys())}")
        te_index_dict = filtered_dict

    data_left_dict = defaultdict(list)
    data_intra_dict = defaultdict(list)
    data_right_dict = defaultdict(list)

    # 计算各区域密度值
    for te_type, index_val in te_index_dict.items():
        if "Revision" in te_type:
            continue

        logger.info(f"\nProcessing TE type: {te_type}")
        
        # 上游区域
        left_densities = []
        for window_idx in range(len(dd_obj.window_list)):
            density = np.mean(left_h5_frame[te_index_dict[te_type], window_idx, :])
            data_left_dict[te_type].append(density)
            left_densities.append(density)
        logger.info(f"Upstream densities: {[f'{x:.6f}' for x in left_densities]}")
        
        # 基因内区域
        intra_density = np.mean(intra_h5_frame[te_index_dict[te_type], :, :])
        data_intra_dict[te_type].append(intra_density)
        logger.info(f"Intragenic density: {intra_density:.6f}")
        
        # 下游区域
        right_densities = []
        for window_idx in range(len(dd_obj.window_list)):
            density = np.mean(right_h5_frame[te_index_dict[te_type], window_idx, :])
            data_right_dict[te_type].append(density)
            right_densities.append(density)
        logger.info(f"Downstream densities: {[f'{x:.6f}' for x in right_densities]}")

    # 生成报告
    base_filename = f"{order_or_super}_{dd_obj.genome_id}"
    
    # 上游区域报告
    upstream_report = generate_density_report(
        data_left_dict, 
        dd_obj.window_list,
        "Upstream",
        os.path.join(output_dir, f"{base_filename}_Upstream_Density_Report.txt")
    )
    logger.info("\nUpstream Region Report:\n" + upstream_report)
    
    # 基因内区域报告
    intragenic_report = generate_density_report(
        data_intra_dict,
        region="Intragenic",
        output_file=os.path.join(output_dir, f"{base_filename}_Intragenic_Density_Report.txt")
    )
    logger.info("\nIntragenic Region Report:\n" + intragenic_report)
    
    # 下游区域报告
    downstream_report = generate_density_report(
        data_right_dict,
        dd_obj.window_list,
        "Downstream",
        os.path.join(output_dir, f"{base_filename}_Downstream_Density_Report.txt")
    )
    logger.info("\nDownstream Region Report:\n" + downstream_report)
    
    # 生成汇总报告
    current_time, current_user = get_metadata()
    summary_report = [
        "="*80,
        "TE Density Analysis Summary",
        "="*80,
        f"\nAnalysis Type: {order_or_super}",
        f"Genome ID: {dd_obj.genome_id}",
        f"Analysis Date: {current_time} UTC",
        f"Generated by: {current_user}",
        "\nTE Types Analyzed:",
        "-"*20
    ]
    
    for te_type in te_index_dict.keys():
        if "Revision" not in te_type:
            summary_report.append(te_type)
    
    summary_report.extend([
        "\nFiles Generated:",
        f"- Combined Density Plot: {base_filename}_Combined_Density_Plot.{format}",
        "- Detailed Reports:",
        f"  * Upstream: {base_filename}_Upstream_Density_Report.txt",
        f"  * Intragenic: {base_filename}_Intragenic_Density_Report.txt",
        f"  * Downstream: {base_filename}_Downstream_Density_Report.txt"
    ])
    
    with open(os.path.join(output_dir, f"{base_filename}_Analysis_Summary.txt"), 'w') as f:
        f.write("\n".join(summary_report))

    # 绘图
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey="col")
    fig.set_size_inches(16, 9.5)

    NUM_COLORS = len(te_index_dict)
    cm = plt.get_cmap("tab20")
    ax1.set_prop_cycle("color", [cm(1.0 * i / NUM_COLORS) for i in range(NUM_COLORS)])
    ax2.set_prop_cycle("color", [cm(1.0 * i / NUM_COLORS) for i in range(NUM_COLORS)])
    ax3.set_prop_cycle("color", [cm(1.0 * i / NUM_COLORS) for i in range(NUM_COLORS)])

    ymin, ymax = ylim if ylim else (0.0, 0.3)

    # 绘制左侧面板(上游)
    for key, val in data_left_dict.items():
        ax1.plot(
            dd_obj.window_list,
            val,
            label=key,
            linestyle=(0, (3, 1, 1, 1)),
            marker="o",
        )
    ax1.set(
        xlabel="BP Upstream",
        ylabel="TE Density",
        xlim=[max(dd_obj.window_list), min(dd_obj.window_list)],
        xticks=range(min(dd_obj.window_list), (max(dd_obj.window_list) + 1), 1000),
        ylim=[ymin, ymax],
    )
    ax1.text(-0.01, 1.05, "A", transform=ax1.transAxes, fontsize=16, 
             fontweight="bold", va="top", ha="right")

    # 绘制中间面板(基因内)
    for key, val in data_intra_dict.items():
        ax2.scatter(0, val, label=key)
    ax2.set(xlabel="Intragenic TEs", xticks=[], ylim=[ymin, ymax])
    ax2.legend(loc="upper right", bbox_to_anchor=(0.76, 0.8))
    ax2.text(-0.01, 1.05, "B", transform=ax2.transAxes, fontsize=16, 
             fontweight="bold", va="top", ha="right")

    # 绘制右侧面板(下游)
    for key, val in data_right_dict.items():
        ax3.plot(
            dd_obj.window_list,
            val,
            label=key,
            linestyle=(0, (3, 1, 1, 1)),
            marker="o",
        )
    ax3.set(
        xlabel="BP Downstream",
        xlim=[min(dd_obj.window_list), max(dd_obj.window_list)],
        xticks=range(min(dd_obj.window_list), (max(dd_obj.window_list) + 1), 1000),
        ylim=[ymin, ymax],
    )
    ax3.yaxis.tick_right()
    ax3.text(-0.01, 1.05, "C", transform=ax3.transAxes, fontsize=16, 
             fontweight="bold", va="top", ha="right")

    filename_to_save = os.path.join(
        output_dir,
        f"{base_filename}_Combined_Density_Plot.{format}",
    )

    logger.info("Saving graphic to: %s" % filename_to_save)

    fig.suptitle(
        "Average TE Density of All Genes as a Function of Window Size and Location"
    )
    plt.savefig(
        filename_to_save,
        bbox_inches="tight",
        format=format,
        dpi=300 if format == 'png' else None,
    )
    if display:
        plt.show()
    plt.close()


if __name__ == "__main__":
    path_main = os.path.abspath(__file__)
    dir_main = os.path.dirname(path_main)
    output_default = os.path.abspath(os.path.join(dir_main, "../", "results/graphs"))
    
    parser = argparse.ArgumentParser(
        description="Generate TE density graphs with detailed reporting",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Example usage:
  %(prog)s input.h5 genes.txt 1 -o results -f svg --ylim 0 0.5
  %(prog)s input.h5 genes.txt 1 --te_types "DNA" "RNA" --verbose
        """
    )

    parser.add_argument(
        "one_chromosome_hdf5_file",
        type=str,
        help="Path to an HDF5 file of TE density data",
    )

    parser.add_argument(
        "arabidopsis_gene_data",
        type=str,
        help="Path to Arabidopsis' filtered gene data file",
    )

    parser.add_argument(
        "chromosome_id",
        type=int,
        help="ID of the chromosome of the HDF5 data to subset the GeneData file",
    )

    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Set debugging level to DEBUG"
    )

    parser.add_argument(
        "--output_dir",
        "-o",
        type=str,
        default=output_default,
        help="Directory to output results",
    )

    parser.add_argument(
        "--format",
        "-f",
        type=str,
        default="svg",
        choices=["svg", "png", "pdf", "eps"],
        help="Output file format (default: svg)",
    )

    parser.add_argument(
        "--te_types",
        "-t",
        type=str,
        nargs="+",
        help="Specific TE types to plot (if not specified, all types will be plotted)",
    )

    parser.add_argument(
        "--plot_orders",
        action="store_true",
        default=True,
        help="Plot TE Orders density",
    )

    parser.add_argument(
        "--plot_superfamilies",
        action="store_true",
        default=True,
        help="Plot TE Superfamilies density",
    )

    parser.add_argument(
        "--ylim",
        type=float,
        nargs=2,
        metavar=('YMIN', 'YMAX'),
        help="Set y-axis limits (min max)",
    )

    parser.add_argument(
        "--display",
        action="store_true",
        help="Display plots while generating (useful for interactive sessions)",
    )

    args = parser.parse_args()
    
    # 验证和规范化输入路径
    args.one_chromosome_hdf5_file = os.path.abspath(args.one_chromosome_hdf5_file)
    args.arabidopsis_gene_data = os.path.abspath(args.arabidopsis_gene_data)
    
    # 检查输入文件是否存在
    for file_path in [args.one_chromosome_hdf5_file, args.arabidopsis_gene_data]:
        if not os.path.exists(file_path):
            parser.error(f"Input file does not exist: {file_path}")

    # 设置日志
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = logging.getLogger(__name__)
    coloredlogs.install(
        level=log_level,
        logger=logger,
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # 创建输出目录
    try:
        os.makedirs(args.output_dir, exist_ok=True)
        logger.info(f"Output directory: {args.output_dir}")
    except Exception as e:
        parser.error(f"Cannot create output directory: {str(e)}")

    # 记录脚本开始执行
    current_time, current_user = get_metadata()
    logger.info(f"Script started at: {current_time} UTC")
    logger.info(f"Executed by user: {current_user}")

    try:
        # 读取基因数据
        logger.info("Reading gene data...")
        gene_data = import_filtered_genes(args.arabidopsis_gene_data, logger)
        # 按染色体过滤数据
        gene_data = gene_data.loc[gene_data["Chromosome"] == args.chromosome_id]
        logger.info(f"Found {len(gene_data)} genes on chromosome {args.chromosome_id}")
        
        # 初始化GeneData对象
        logger.info("Initializing GeneData from cleaned annotation file")
        gene_data = GeneData(gene_data, str("Arabidopsis_" + str(args.chromosome_id)))

        # 初始化DensityData对象
        logger.info("Initializing DensityData from HDF5 file")
        processed_arabidopsis_density_data = DensityData.verify_h5_cache(
            args.one_chromosome_hdf5_file, gene_data, logger
        )

        # 绘制TE Orders密度图
        if args.plot_orders:
            logger.info("Plotting TE Orders density")
            plot_density_all(
                processed_arabidopsis_density_data,
                "Order",
                args.output_dir,
                logger,
                te_types=args.te_types,
                format=args.format,
                display=args.display,
                ylim=args.ylim
            )

        # 绘制TE Superfamilies密度图
        if args.plot_superfamilies:
            logger.info("Plotting TE Superfamilies density")
            plot_density_all(
                processed_arabidopsis_density_data,
                "Superfamily",
                args.output_dir,
                logger,
                te_types=args.te_types,
                format=args.format,
                display=args.display,
                ylim=args.ylim
            )

        logger.info("Analysis completed successfully")
        
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}", exc_info=True)
        raise

    finally:
        # 记录脚本结束时间
        end_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"Script finished at: {end_time} UTC")
